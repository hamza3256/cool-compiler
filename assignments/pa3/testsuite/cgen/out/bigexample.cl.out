	.data
	.align	2
	.globl	class_nameTab
	.globl	Main_protObj
	.globl	Int_protObj
	.globl	String_protObj
	.globl	bool_const0
	.globl	bool_const1
	.globl	_int_tag
	.globl	_bool_tag
	.globl	_string_tag
_int_tag:
	.word	10
_bool_tag:
	.word	5
_string_tag:
	.word	15
	.globl	_MemMgr_INITIALIZER
_MemMgr_INITIALIZER:
	.word	_NoGC_Init
	.globl	_MemMgr_COLLECTOR
_MemMgr_COLLECTOR:
	.word	_NoGC_Collect
	.globl	_MemMgr_TEST
_MemMgr_TEST:
	.word	0
	.word	-1
str_const44:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const1
	.byte	0	
	.align	2
	.word	-1
str_const29:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const2
	.ascii	"A"
	.byte	0	
	.align	2
	.word	-1
str_const30:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const2
	.ascii	"B"
	.byte	0	
	.align	2
	.word	-1
str_const31:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const2
	.ascii	"C"
	.byte	0	
	.align	2
	.word	-1
str_const40:
	.word	15
	.word	6
	.word	String_dispTab
	.word	int_const5
	.ascii	"Parent"
	.byte	0	
	.align	2
	.word	-1
str_const13:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"foo"
	.byte	0	
	.align	2
	.word	-1
str_const6:
	.word	15
	.word	7
	.word	String_dispTab
	.word	int_const7
	.ascii	"bigWhile\n"
	.byte	0	
	.align	2
	.word	-1
str_const8:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const2
	.ascii	"\n"
	.byte	0	
	.align	2
	.word	-1
str_const42:
	.word	15
	.word	6
	.word	String_dispTab
	.word	int_const5
	.ascii	"String"
	.byte	0	
	.align	2
	.word	-1
str_const20:
	.word	15
	.word	12
	.word	String_dispTab
	.word	int_const82
	.ascii	"printed via dynamic dispatch\n"
	.byte	0	
	.align	2
	.word	-1
str_const37:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"Int"
	.byte	0	
	.align	2
	.word	-1
str_const36:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"C1"
	.byte	0	
	.align	2
	.word	-1
str_const28:
	.word	15
	.word	6
	.word	String_dispTab
	.word	int_const9
	.ascii	"Blah"
	.byte	0	
	.align	2
	.word	-1
str_const35:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"C2"
	.byte	0	
	.align	2
	.word	-1
str_const34:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const2
	.ascii	"P"
	.byte	0	
	.align	2
	.word	-1
str_const14:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"bar"
	.byte	0	
	.align	2
	.word	-1
str_const0:
	.word	15
	.word	17
	.word	String_dispTab
	.word	int_const83
	.ascii	"/home/raj/cool/distro/testsuite/cgen/bigexample.cl"
	.byte	0	
	.align	2
	.word	-1
str_const18:
	.word	15
	.word	8
	.word	String_dispTab
	.word	int_const22
	.ascii	"bigAttrAccess\n"
	.byte	0	
	.align	2
	.word	-1
str_const15:
	.word	15
	.word	6
	.word	String_dispTab
	.word	int_const5
	.ascii	"foobar"
	.byte	0	
	.align	2
	.word	-1
str_const32:
	.word	15
	.word	6
	.word	String_dispTab
	.word	int_const9
	.ascii	"Bool"
	.byte	0	
	.align	2
	.word	-1
str_const4:
	.word	15
	.word	8
	.word	String_dispTab
	.word	int_const24
	.ascii	"more advanced:\n"
	.byte	0	
	.align	2
	.word	-1
str_const11:
	.word	15
	.word	7
	.word	String_dispTab
	.word	int_const11
	.ascii	"bigAssign\n"
	.byte	0	
	.align	2
	.word	-1
str_const41:
	.word	15
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"Child"
	.byte	0	
	.align	2
	.word	-1
str_const5:
	.word	15
	.word	6
	.word	String_dispTab
	.word	int_const5
	.ascii	"bigIf\n"
	.byte	0	
	.align	2
	.word	-1
str_const7:
	.word	15
	.word	7
	.word	String_dispTab
	.word	int_const26
	.ascii	"failed: "
	.byte	0	
	.align	2
	.word	-1
str_const2:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"Hi"
	.byte	0	
	.align	2
	.word	-1
str_const1:
	.word	15
	.word	7
	.word	String_dispTab
	.word	int_const7
	.ascii	"whassup?!"
	.byte	0	
	.align	2
	.word	-1
str_const43:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"IO"
	.byte	0	
	.align	2
	.word	-1
str_const25:
	.word	15
	.word	7
	.word	String_dispTab
	.word	int_const11
	.ascii	"looks ok!\n"
	.byte	0	
	.align	2
	.word	-1
str_const23:
	.word	15
	.word	9
	.word	String_dispTab
	.word	int_const84
	.ascii	"gonna make a Blah\n"
	.byte	0	
	.align	2
	.word	-1
str_const16:
	.word	15
	.word	8
	.word	String_dispTab
	.word	int_const22
	.ascii	"bigStrCompare\n"
	.byte	0	
	.align	2
	.word	-1
str_const26:
	.word	15
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"<basic class>"
	.byte	0	
	.align	2
	.word	-1
str_const24:
	.word	15
	.word	10
	.word	String_dispTab
	.word	int_const85
	.ascii	"gonna call doThemAll\n"
	.byte	0	
	.align	2
	.word	-1
str_const9:
	.word	15
	.word	7
	.word	String_dispTab
	.word	int_const26
	.ascii	"bigMath\n"
	.byte	0	
	.align	2
	.word	-1
str_const38:
	.word	15
	.word	6
	.word	String_dispTab
	.word	int_const9
	.ascii	"Base"
	.byte	0	
	.align	2
	.word	-1
str_const19:
	.word	15
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"hello, world\n"
	.byte	0	
	.align	2
	.word	-1
str_const10:
	.word	15
	.word	9
	.word	String_dispTab
	.word	int_const84
	.ascii	"assertion failed: "
	.byte	0	
	.align	2
	.word	-1
str_const3:
	.word	15
	.word	7
	.word	String_dispTab
	.word	int_const26
	.ascii	"basics:\n"
	.byte	0	
	.align	2
	.word	-1
str_const22:
	.word	15
	.word	7
	.word	String_dispTab
	.word	int_const26
	.ascii	"an int: "
	.byte	0	
	.align	2
	.word	-1
str_const17:
	.word	15
	.word	7
	.word	String_dispTab
	.word	int_const26
	.ascii	"bigCase\n"
	.byte	0	
	.align	2
	.word	-1
str_const27:
	.word	15
	.word	6
	.word	String_dispTab
	.word	int_const5
	.ascii	"Object"
	.byte	0	
	.align	2
	.word	-1
str_const12:
	.word	15
	.word	7
	.word	String_dispTab
	.word	int_const26
	.ascii	"bigSelf\n"
	.byte	0	
	.align	2
	.word	-1
str_const39:
	.word	15
	.word	7
	.word	String_dispTab
	.word	int_const19
	.ascii	"Grandparent"
	.byte	0	
	.align	2
	.word	-1
str_const33:
	.word	15
	.word	6
	.word	String_dispTab
	.word	int_const9
	.ascii	"Main"
	.byte	0	
	.align	2
	.word	-1
str_const21:
	.word	15
	.word	14
	.word	String_dispTab
	.word	int_const86
	.ascii	"tested static dispatch and 'new IO'\n"
	.byte	0	
	.align	2
	.word	-1
int_const21:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	45
	.word	-1
int_const70:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	390
	.word	-1
int_const64:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	350
	.word	-1
int_const65:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	351
	.word	-1
int_const66:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	352
	.word	-1
int_const67:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	353
	.word	-1
int_const52:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	310
	.word	-1
int_const71:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	399
	.word	-1
int_const68:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	355
	.word	-1
int_const53:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	311
	.word	-1
int_const54:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	312
	.word	-1
int_const38:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	114
	.word	-1
int_const55:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	313
	.word	-1
int_const39:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	115
	.word	-1
int_const57:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	314
	.word	-1
int_const42:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	3114
	.word	-1
int_const40:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	116
	.word	-1
int_const75:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	438
	.word	-1
int_const48:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	92
	.word	-1
int_const83:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	50
	.word	-1
int_const11:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	10
	.word	-1
int_const19:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	11
	.word	-1
int_const18:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	55
	.word	-1
int_const8:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	99
	.word	-1
int_const13:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	12
	.word	-1
int_const6:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	13
	.word	-1
int_const22:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	14
	.word	-1
int_const24:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	15
	.word	-1
int_const37:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	16
	.word	-1
int_const84:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	18
	.word	-1
int_const1:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	0
	.word	-1
int_const56:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	320
	.word	-1
int_const2:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	1
	.word	-1
int_const15:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	123
	.word	-1
int_const3:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	2
	.word	-1
int_const44:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	2116
	.word	-1
int_const0:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	3
	.word	-1
int_const76:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	444
	.word	-1
int_const9:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	4
	.word	-1
int_const41:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	2114
	.word	-1
int_const4:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	5
	.word	-1
int_const5:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	6
	.word	-1
int_const25:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	7
	.word	-1
int_const58:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	327
	.word	-1
int_const26:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	8
	.word	-1
int_const7:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	9
	.word	-1
int_const72:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	408
	.word	-1
int_const85:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	21
	.word	-1
int_const31:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	65
	.word	-1
int_const32:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	66
	.word	-1
int_const20:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	22
	.word	-1
int_const12:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	24
	.word	-1
int_const82:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	29
	.word	-1
int_const16:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	1000
	.word	-1
int_const27:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	250
	.word	-1
int_const28:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	251
	.word	-1
int_const29:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	253
	.word	-1
int_const80:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	496
	.word	-1
int_const30:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	254
	.word	-1
int_const77:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	453
	.word	-1
int_const33:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	255
	.word	-1
int_const81:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	498
	.word	-1
int_const34:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	257
	.word	-1
int_const35:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	258
	.word	-1
int_const17:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	1234
	.word	-1
int_const36:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	259
	.word	-1
int_const78:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	459
	.word	-1
int_const59:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	339
	.word	-1
int_const73:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	417
	.word	-1
int_const23:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	75
	.word	-1
int_const10:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	34
	.word	-1
int_const86:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	36
	.word	-1
int_const69:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	381
	.word	-1
int_const60:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	340
	.word	-1
int_const61:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	341
	.word	-1
int_const62:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	342
	.word	-1
int_const14:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	100
	.word	-1
int_const45:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	101
	.word	-1
int_const46:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	102
	.word	-1
int_const47:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	103
	.word	-1
int_const63:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	346
	.word	-1
int_const49:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	104
	.word	-1
int_const79:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	468
	.word	-1
int_const50:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	105
	.word	-1
int_const51:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	106
	.word	-1
int_const74:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	426
	.word	-1
int_const43:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	84
	.word	-1
bool_const0:
	.word	5
	.word	4
	.word	Bool_dispTab
	.word	0
	.word	-1
bool_const1:
	.word	5
	.word	4
	.word	Bool_dispTab
	.word	1
class_nameTab:
	.word	str_const27
	.word	str_const28
	.word	str_const29
	.word	str_const30
	.word	str_const31
	.word	str_const32
	.word	str_const33
	.word	str_const34
	.word	str_const35
	.word	str_const36
	.word	str_const37
	.word	str_const38
	.word	str_const39
	.word	str_const40
	.word	str_const41
	.word	str_const42
	.word	str_const43
class_objTab:
	.word	Object_protObj
	.word	Object_init
	.word	Blah_protObj
	.word	Blah_init
	.word	A_protObj
	.word	A_init
	.word	B_protObj
	.word	B_init
	.word	C_protObj
	.word	C_init
	.word	Bool_protObj
	.word	Bool_init
	.word	Main_protObj
	.word	Main_init
	.word	P_protObj
	.word	P_init
	.word	C2_protObj
	.word	C2_init
	.word	C1_protObj
	.word	C1_init
	.word	Int_protObj
	.word	Int_init
	.word	Base_protObj
	.word	Base_init
	.word	Grandparent_protObj
	.word	Grandparent_init
	.word	Parent_protObj
	.word	Parent_init
	.word	Child_protObj
	.word	Child_init
	.word	String_protObj
	.word	String_init
	.word	IO_protObj
	.word	IO_init
Object_dispTabBlah_dispTabA_dispTabB_dispTabC_dispTabBool_dispTabMain_dispTabP_dispTabC2_dispTabC1_dispTabInt_dispTabBase_dispTabGrandparent_dispTabParent_dispTabChild_dispTabString_dispTabIO_dispTab	.word	-1
Object_protObj:
	.word	0
	.word	3
	.word	Object_dispTab
	.word	-1
Blah_protObj:
	.word	1
	.word	11
	.word	Blah_dispTab
	.word	int_const1
	.word	bool_const0
	.word	str_const44
	.word	int_const1
	.word	bool_const0
	.word	str_const44
	.word	0
	.word	0
	.word	-1
A_protObj:
	.word	2
	.word	3
	.word	A_dispTab
	.word	-1
B_protObj:
	.word	3
	.word	3
	.word	B_dispTab
	.word	-1
C_protObj:
	.word	4
	.word	3
	.word	C_dispTab
	.word	-1
Bool_protObj:
	.word	5
	.word	4
	.word	Bool_dispTab
	.word	0
	.word	-1
Main_protObj:
	.word	6
	.word	3
	.word	Main_dispTab
	.word	-1
P_protObj:
	.word	7
	.word	4
	.word	P_dispTab
	.word	int_const1
	.word	-1
C2_protObj:
	.word	8
	.word	4
	.word	C2_dispTab
	.word	int_const1
	.word	-1
C1_protObj:
	.word	9
	.word	4
	.word	C1_dispTab
	.word	int_const1
	.word	-1
Int_protObj:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	0
	.word	-1
Base_protObj:
	.word	11
	.word	6
	.word	Base_dispTab
	.word	int_const1
	.word	str_const44
	.word	bool_const0
	.word	-1
Grandparent_protObj:
	.word	12
	.word	9
	.word	Grandparent_dispTab
	.word	int_const1
	.word	str_const44
	.word	bool_const0
	.word	0
	.word	int_const1
	.word	0
	.word	-1
Parent_protObj:
	.word	13
	.word	12
	.word	Parent_dispTab
	.word	int_const1
	.word	str_const44
	.word	bool_const0
	.word	0
	.word	int_const1
	.word	0
	.word	0
	.word	int_const1
	.word	bool_const0
	.word	-1
Child_protObj:
	.word	14
	.word	16
	.word	Child_dispTab
	.word	int_const1
	.word	str_const44
	.word	bool_const0
	.word	0
	.word	int_const1
	.word	0
	.word	0
	.word	int_const1
	.word	bool_const0
	.word	0
	.word	0
	.word	0
	.word	str_const44
	.word	-1
String_protObj:
	.word	15
	.word	5
	.word	String_dispTab
	.word	int_const1
	.word	0
	.word	-1
IO_protObj:
	.word	16
	.word	3
	.word	IO_dispTab
	.globl	heap_start
heap_start:
	.word	0
	.text
	.globl	Main_init
	.globl	Int_init
	.globl	String_init
	.globl	Bool_init
	.globl	Main.main
Object_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	bne	$a0 $zero label0
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label0:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
	la	$a0 bool_const1
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
A_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
B_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	A_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
C_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	B_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Bool_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Main_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
P_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Object_init
	la	$a0 int_const0
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
C2_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	P_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
C1_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	P_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Int_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Base_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Grandparent_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Base_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Parent_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Grandparent_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Child_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Parent_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
String_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
IO_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.tiny:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.add:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.compare:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.compareEq:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.isv:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.divByZero:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.cmp:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.ng:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	jal	Object.copy
	lw	$t1 12($a0)
	neg	$t1 $t1
	sw	$t1 12($a0)
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.caller:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.callee:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra	
Blah.get_t:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.useLet:
	addiu	$sp $sp -24
	sw	$fp 24($sp)
	sw	$s0 20($sp)
	sw	$ra 16($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	sw	$a0 0($fp)
	la	$a0 int_const8
	sw	$a0 4($fp)
	sw	null 8($fp)
	move	$a0 null
	lw	$fp 24($sp)
	lw	$s0 20($sp)
	lw	$ra 16($sp)
	addiu	$sp $sp 24
	jr	$ra	
Blah.useIf:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.useWhile:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.useCase:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 $s0
	bne	$a0 $zero label3
	la	$a0 str_const0
	li	$t1 1
	jal	_case_abort2
label3:
	lw	$t2 0($a0)
	blt	$t2 7 label4
	bgt	$t2 9 label4
	sw	$a0 0($fp)
	la	$a0 int_const0
	b	label2
label4:
	blt	$t2 4 label5
	bgt	$t2 4 label5
	sw	$a0 0($fp)
	la	$a0 int_const9
	b	label2
label5:
	blt	$t2 1 label6
	bgt	$t2 1 label6
	sw	$a0 0($fp)
	la	$a0 int_const4
	b	label2
label6:
	jal	_case_abort
label2:
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.useNew:
	addiu	$sp $sp -16
	sw	$fp 16($sp)
	sw	$s0 12($sp)
	sw	$ra 8($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 16($sp)
	lw	$s0 12($sp)
	lw	$ra 8($sp)
	addiu	$sp $sp 16
	jr	$ra	
Blah.doThemAll:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.bigIf:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.bigWhile:
	addiu	$sp $sp -36
	sw	$fp 36($sp)
	sw	$s0 32($sp)
	sw	$ra 28($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 36($sp)
	lw	$s0 32($sp)
	lw	$ra 28($sp)
	addiu	$sp $sp 36
	jr	$ra	
Blah.bail:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 16
	jr	$ra	
Blah.bigMath:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.assert:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra	
Blah.bigAssign:
	addiu	$sp $sp -24
	sw	$fp 24($sp)
	sw	$s0 20($sp)
	sw	$ra 16($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	sw	$a0 0($fp)
	la	$a0 int_const1
	sw	$a0 4($fp)
	la	$a0 int_const1
	sw	$a0 8($fp)
	move	$a0 null
	lw	$fp 24($sp)
	lw	$s0 20($sp)
	lw	$ra 16($sp)
	addiu	$sp $sp 24
	jr	$ra	
Blah.setI:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	lw	$a0 12($fp)
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 16
	jr	$ra	
Blah.getI:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Blah.bigSelf:
	addiu	$sp $sp -24
	sw	$fp 24($sp)
	sw	$s0 20($sp)
	sw	$ra 16($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	sw	$zero 0($fp)
	move	$a0 $s0
	sw	$a0 4($fp)
	sw	$a0 8($fp)
	move	$a0 null
	lw	$fp 24($sp)
	lw	$s0 20($sp)
	lw	$ra 16($sp)
	addiu	$sp $sp 24
	jr	$ra	
Blah.bigStrCompare:
	addiu	$sp $sp -32
	sw	$fp 32($sp)
	sw	$s0 28($sp)
	sw	$ra 24($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 str_const13
	sw	$a0 0($fp)
	la	$a0 str_const14
	sw	$a0 4($fp)
	la	$a0 str_const15
	sw	$a0 8($fp)
	la	$a0 str_const44
	sw	$a0 12($fp)
	la	$a0 str_const44
	sw	$a0 16($fp)
	move	$a0 null
	lw	$fp 32($sp)
	lw	$s0 28($sp)
	lw	$ra 24($sp)
	addiu	$sp $sp 32
	jr	$ra	
Blah.bigCase:
	addiu	$sp $sp -44
	sw	$fp 44($sp)
	sw	$s0 40($sp)
	sw	$ra 36($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	sw	$a0 0($fp)
	sw	$a0 4($fp)
	sw	$a0 8($fp)
	sw	$a0 12($fp)
	sw	$a0 16($fp)
	sw	$a0 20($fp)
	la	$a0 int_const1
	sw	$a0 24($fp)
	sw	$zero 28($fp)
	move	$a0 null
	lw	$fp 44($sp)
	lw	$s0 40($sp)
	lw	$ra 36($sp)
	addiu	$sp $sp 44
	jr	$ra	
Blah.bigAttrAccess:
	addiu	$sp $sp -16
	sw	$fp 16($sp)
	sw	$s0 12($sp)
	sw	$ra 8($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	sw	$a0 0($fp)
	move	$a0 null
	lw	$fp 16($sp)
	lw	$s0 12($sp)
	lw	$ra 8($sp)
	addiu	$sp $sp 16
	jr	$ra	
A.e:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
A.f:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
A.g:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
A.i:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
A.j:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
B.e:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
B.g:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
B.h:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
B.k:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
C.e:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
C.h:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
C.i:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
C.ell:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
Main.main:
	addiu	$sp $sp -24
	sw	$fp 24($sp)
	sw	$s0 20($sp)
	sw	$ra 16($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	sw	$a0 0($fp)
	sw	$zero 4($fp)
	move	$a0 null
	lw	$fp 24($sp)
	lw	$s0 20($sp)
	lw	$ra 16($sp)
	addiu	$sp $sp 24
	jr	$ra	
C2.getX:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 null
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra	
C2.setX:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	lw	$a0 12($fp)
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 16
	jr	$ra	
